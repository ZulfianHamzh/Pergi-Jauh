generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_account_user")

  @@unique([provider, providerAccountId], map: "unique_provider_account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_session_user")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @db.Timestamptz(6)
  image         String?
  password      String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token], map: "unique_identifier_token")
}

model Product {
  id                        String                      @id @default(cuid())
  name                      String
  price                     Float
  availability              Availability
  image                     String?
  weight                    String?
  condition                 String?
  category                  Category?
  productDetail             String?
  createdAt                 DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                    @default(now()) @updatedAt @db.Timestamptz(6)
  stock                     BigInt
  harga_beli_satuan         Float?
  Product_combination_items Product_combination_items[]
}

model Event {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  image           String
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  detailEvent     String?  @db.VarChar
  linkPendaftaran String?
}

model Menu_Transaksi {
  id                    BigInt    @id @default(autoincrement())
  id_transaksi          String
  nama_menu             String
  harga_menu            Decimal   @db.Decimal(10, 2)
  jumlah_menu           Int
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  suhu                  String?
  suhu_minuman          String?
  suhu_harga            Decimal?  @db.Decimal(10, 2)
  suhu_total            Decimal?  @db.Decimal(10, 2)
  harga_menu_asli       Decimal?  @db.Decimal
  topping_tambahan_list Json?
  topping_kentang_list  Json?
  indomie_variant       Json?
  id_menu               String?
  Transaksi             Transaksi @relation(fields: [id_transaksi], references: [id_transaksi], onDelete: Cascade, onUpdate: NoAction, map: "fk_id_transaksi")

  @@index([id_transaksi], map: "idx_menu_transaksi_id_transaksi")
}

model Transaksi {
  id_transaksi     String           @id
  atas_nama        String
  notes            String?
  pembayaran       String
  dibuat_oleh      String?
  total            Decimal          @db.Decimal(10, 2)
  status           String           @default("Selesai")
  created_at       DateTime?        @default(now()) @db.Timestamptz(6)
  preferensi_kopi  String?
  topping_tambahan String?
  topping_kentang  String?
  discount         Decimal?         @db.Decimal(10, 2)
  Menu_Transaksi   Menu_Transaksi[]

  @@index([atas_nama], map: "idx_transaksi_atas_nama")
  @@index([created_at], map: "idx_transaksi_created_at")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  username   String    @unique
  password   String
  phone      String?
  role       String    @default("Karyawan")
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model logs {
  id          BigInt    @id @default(autoincrement())
  error       String?
  stack_trace String?
  source      String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Product_combination_items {
  id                     String               @id(map: "product_combination_items_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_combination_id String               @db.Uuid
  product_id             String
  quantity               Int                  @default(1)
  Product_combinations   Product_combinations @relation(fields: [product_combination_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_combination_items_combination")
  Product                Product              @relation(fields: [product_id], references: [id], onUpdate: NoAction, map: "fk_product_combination_items_product")

  @@unique([product_combination_id, product_id], map: "unique_combination_product")
  @@index([product_combination_id], map: "idx_product_combination_items_combination_id")
  @@index([product_id], map: "idx_product_combination_items_product_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Product_combinations {
  id                        String                      @id(map: "product_combinations_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String
  price                     Float
  created_at                DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at                DateTime                    @default(now()) @db.Timestamptz(6)
  image_url                 String?
  category                  Category?
  productDetail             String?
  Product_combination_items Product_combination_items[]
}

enum Availability {
  Tersedia
  Habis
}

enum Category {
  Coffee
  NonCoffee
  Foods
  Snacks
  Paket
}
